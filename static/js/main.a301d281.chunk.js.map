{"version":3,"sources":["App.module.css","components/Header/Header.js","components/Note/Note.js","components/EditNote/EditNote.js","App.js","serviceWorker.js","index.js","components/Note/Note.module.css","components/EditNote/EditNote.module.css","components/Header/Header.module.css"],"names":["module","exports","App","Main","List","Notice","AddButton","Header","props","react_default","a","createElement","className","styles","header","headerText","text","Note","onClick","clicked","bind","this","id","MiniTitle","title","substr","MiniBody","body","EditNote","handleChange","e","key","console","log","target","value","_this","_this2","Form","onSubmit","handleSubmit","Title","placeholder","onChange","rows","Body","style","height","Component","appName","notes","localStoragePreparedNotes","JSON","stringify","localStorage","setItem","parse","getItem","getNotesFromLocalStorage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_saveNoteToStateAndLocalStorage","handleEditClickedNote","note","state","find","setState","handleAddNewNote","length","newNote","concat","push","_saveNotesToLocalStorage","newValue","noteIndex","findIndex","map","i","Note_Note","Header_Header","type","marginTop","components_EditNote_EditNote","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a301d281.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1P6a2\",\"Main\":\"App_Main__3CQw9\",\"List\":\"App_List__REDI9\",\"Notice\":\"App_Notice__vNptd\",\"AddButton\":\"App_AddButton__WVy15\"};","import React from 'react'\nimport styles from './Header.module.css'\n\nfunction Header(props) {\n  return (\n    <div className={styles.header + \" col-12\"}>\n      <h1 className={styles.headerText}>{props.text}</h1>\n    </div>\n  );\n}\n\nexport default Header","import React from 'react'\nimport styles from './Note.module.css';\n\nfunction Note(props) {\n  return (\n    <div\n      className={styles.Note + ' col-md-10  col-sm-10 col-8'}\n      onClick={props.clicked.bind(this, props.id)}\n    >\n      <h4 className={styles.MiniTitle}>{props.id}. {props.title.substr(0, 15)  || \"Enter title here\"} ...</h4>\n      <p className={styles.MiniBody}>{props.body.substr(0, 30) || \"Enter body here\"} ...</p>\n    </div>\n  );\n}\n\nexport default Note","import React, { Component } from 'react'\nimport styles from './EditNote.module.css';\n\nclass EditNote extends Component {\n  handleChange = (e, key) => {\n    console.log(e.target.value, key)\n    // Extra argument to specify what is being changed\n    this.props.handleChange(e.target.value, key)\n  }\n\n  render() {\n    const id = this.props.id\n    const title = this.props.title\n    const body = this.props.body\n\n    return (\n      // Form to edit and update existing notes\n      <form className={styles.Form + ' form-group'} onSubmit={this.handleSubmit}>\n        <div>\n          <p>You are editing slot {id}</p>\n        </div>\n        <div>\n          <input className={styles.Title + ' form-control'}\n            value={title}\n            placeholder={\"Enter title here\"}\n            onChange={e => this.handleChange(e, 'title')}\n          />\n        </div>\n        <div>\n          <textarea rows=\"1000\"\n            className={styles.Body + ' form-control'}\n            style={{ height: '450px' }}\n            value={body}\n            placeholder={\"Enter body here\"}\n            onChange={e => this.handleChange(e, 'body')}\n          />\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default EditNote","import React, { Component } from 'react';\nimport styles from './App.module.css';\nimport Header from './components/Header/Header';\nimport Note from './components/Note/Note';\nimport EditNote from './components/EditNote/EditNote';\n\nconst appName = 'SNA';\nconst localStorageStartupName = 'SNA-STARTUP';\n\nconst getNotesFromLocalStorage = () => {\n  const initialNoteOnFirstStartUp = { id: 1, title: 'Title', body: 'Note body' };\n  const localStoragePreparedNotes = JSON.stringify([initialNoteOnFirstStartUp]);\n  localStorage.setItem(localStorageStartupName, localStoragePreparedNotes)\n\n  return JSON.parse(localStorage.getItem(appName))\n    || JSON.parse(localStorage.getItem(localStorageStartupName))\n}\n\nconst notes = getNotesFromLocalStorage()\nconsole.log(notes)\n\nclass App extends Component {\n  constructor() {\n    super()\n    // Initialize state hence EditNote with first note in notes array\n    const note = notes.find(note => note.id === 1)\n\n    this.state = {\n      notes: notes,\n      id: note.id,\n      title: note.title,\n      body: note.body,\n    };\n  }\n\n  handleChange = (value, key) => {\n    // Key is the property that's changed\n    this._saveNoteToStateAndLocalStorage(value, key)\n  }\n\n  // Change the state of form input values to currently clicked note\n  handleEditClickedNote = (id) => {\n    // Find clicked note for editing\n    const note = this.state.notes.find(note => note.id === id);\n    const title = note.title;\n    const body = note.body;\n\n    // Set found note to be edited\n    this.setState({ id, title, body });\n  }\n\n  handleAddNewNote = e => {\n    // Initial note content for newly added notes\n    const notes = this.state.notes;\n    const id = notes.length + 1;\n    const newNote = {\n      id: id,\n      title: `Title ${id}`,\n      body: `Note body ${id}`\n    };\n\n    // Save note to state and localStorage\n    notes.push(newNote);\n    this.setState({ notes });\n    this._saveNotesToLocalStorage()\n  }\n\n  _saveNoteToStateAndLocalStorage = (newValue, key) => {\n    // Find note being edited by id\n    const notes = this.state.notes;\n    const noteIndex = notes.findIndex(note => note.id === this.state.id);\n    const note = notes[noteIndex];\n\n    // Update note with value\n    // More dynamic way to set title or body depending on which is changed\n    note[key] = newValue;\n\n    // Update state with new value of note being edited as well\n    this.setState({ title: note.title, body: note.body })\n\n    // Update notes in state\n    notes[noteIndex] = note;\n    this.setState({ notes });\n\n    // Save notes to localStorage as well\n    this._saveNotesToLocalStorage();\n  }\n\n  _saveNotesToLocalStorage = () => {\n    localStorage.setItem(appName, JSON.stringify(this.state.notes));\n  }\n\n  render() {\n    const notes = [];\n\n    this.state.notes.map((note, i) =>\n      notes[i] =\n      <Note key={i + 1}\n        id={note.id}\n        title={note.title}\n        body={note.body}\n        clicked={this.handleEditClickedNote}\n      />\n    )\n\n    return (\n      <div className={styles.App + ' container-fluid'}>\n        <div className=\"row\">\n          <Header text=\"My Simple Note App\" />\n        </div>\n\n        <div className={styles.Main + ' row'}>\n          <div className={styles.List + ' col-md-4 col-sm-5 col-12'}>\n            {notes}\n            <input\n              type=\"button\"\n              className={styles.AddButton + ' btn btn-light'}\n              style={{ marginTop: '20px' }}\n              value=\"Add New Note\"\n              onClick={this.handleAddNewNote} />\n            <p className={styles.Notice}>\n              Note:  Notes are saved as you type :)\n            </p>\n          </div>\n\n          <div className=\"col-md-8 col-sm-7 col-12\">\n            <EditNote\n              id={this.state.id}\n              title={this.state.title}\n              body={this.state.body}\n              handleChange={this.handleChange}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Note\":\"Note_Note__3wwRh\",\"MiniTitle\":\"Note_MiniTitle__3vIUm\",\"MiniBody\":\"Note_MiniBody__F_p8N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"EditNote_Form__1cILs\",\"Title\":\"EditNote_Title__1zQlM\",\"Body\":\"EditNote_Body__2YwC5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2fKgf\",\"headerText\":\"Header_headerText__1D0CB\"};"],"sourceRoot":""}