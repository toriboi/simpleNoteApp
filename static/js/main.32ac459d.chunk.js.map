{"version":3,"sources":["App.module.css","components/Note/Note.module.css","components/Header/Header.js","components/Note/Note.js","components/EditNote/EditNote.js","App.js","serviceWorker.js","index.js","components/EditNote/EditNote.module.css","components/Header/Header.module.css"],"names":["module","exports","App","Main","List","Scroll","Notice","AddButton","Note","MiniTitle","MiniBody","Delete","Show","Header","props","react_default","a","createElement","className","styles","header","headerText","text","onClick","e","edit","id","title","substr","width","delete","body","EditNote","handleChange","key","_this","target","value","_this2","this","Form","onSubmit","handleSubmit","Title","placeholder","onChange","rows","Body","style","height","Component","appName","notes","localStoragePreparedNotes","JSON","stringify","localStorage","setItem","parse","getItem","getNotesFromLocalStorage","console","log","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","_updateStateWithWindowWidth","window","addEventListener","setState","innerWidth","_saveNoteToStateAndLocalStorage","handleEditClickedNote","matches","note","state","handleDeleteNote","splice","_notes$_id","_saveNotesToLocalStorage","alert","handleAddNewNote","push","newValue","idOfLastClicked","map","Note_Note","Header_Header","type","marginTop","components_EditNote_EditNote","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32ac459d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1P6a2\",\"Main\":\"App_Main__3CQw9\",\"List\":\"App_List__REDI9\",\"Scroll\":\"App_Scroll__3zChL\",\"Notice\":\"App_Notice__vNptd\",\"AddButton\":\"App_AddButton__WVy15\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Note\":\"Note_Note__3wwRh\",\"MiniTitle\":\"Note_MiniTitle__3vIUm\",\"MiniBody\":\"Note_MiniBody__F_p8N\",\"Delete\":\"Note_Delete__1Pdmq\",\"Show\":\"Note_Show__26BrV\"};","import React from 'react'\nimport styles from './Header.module.css'\n\nfunction Header(props) {\n  return (\n    <div className={styles.header + \" col-12\"}>\n      <h1 className={styles.headerText}>{props.text}</h1>\n    </div>\n  );\n}\n\nexport default Header","import React from 'react'\nimport styles from './Note.module.css';\n\nfunction Note(props) {\n  return (\n    <div\n      className={styles.Note + ' edit col-md-10  col-sm-10 col-8'}\n      onClick={e => props.edit(e, props.id)}\n    >\n      <h4 className={styles.MiniTitle}>{props.id + 1}. {props.title.substr(0, 15) || \"Enter title here\"} ...\n      <span\n          className={(props.width > 575 ? styles.Delete : styles.Show) + ' delete'}\n          onClick={e => props.delete(e, props.id)}>\n          X\n      </span></h4>\n      <p className={styles.MiniBody}>{props.body.substr(0, 30) || \"Enter body here\"} ...</p>\n    </div>\n  );\n}\n\nexport default Note\n","import React, { Component } from 'react'\nimport styles from './EditNote.module.css';\n\nclass EditNote extends Component {\n  handleChange = (e, key) => {\n    // Extra argument to specify what is being changed\n    this.props.handleChange(e.target.value, key)\n  }\n\n  render() {\n    const id = this.props.id;\n    const title = this.props.title;\n    const body = this.props.body;\n\n    return (\n      // Form to edit and update existing notes\n      <form className={styles.Form + ' form-group'} onSubmit={this.handleSubmit}>\n        <div>\n          <p>You are editing slot {id + 1}</p>\n        </div>\n        <div>\n          <input className={styles.Title + ' form-control'}\n            value={title}\n            placeholder={\"Enter title here\"}\n            onChange={e => this.handleChange(e, 'title')}\n          />\n        </div>\n        <div>\n          <textarea rows=\"1000\"\n            className={styles.Body + ' form-control'}\n            style={{ height: '450px' }}\n            value={body}\n            placeholder={\"Enter body here\"}\n            onChange={e => this.handleChange(e, 'body')}\n          />\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default EditNote","import React, { Component } from 'react';\nimport styles from './App.module.css';\nimport Header from './components/Header/Header';\nimport Note from './components/Note/Note';\nimport EditNote from './components/EditNote/EditNote';\n\nconst appName = 'SNA';\nconst localStorageStartupName = 'SNA-STARTUP';\n\nconst getNotesFromLocalStorage = () => {\n  const initialNoteOnFirstStartUp = { title: 'Title', body: 'Note body' };\n  const localStoragePreparedNotes = JSON.stringify([initialNoteOnFirstStartUp]);\n  localStorage.setItem(localStorageStartupName, localStoragePreparedNotes)\n\n  return JSON.parse(localStorage.getItem(appName))\n    || JSON.parse(localStorage.getItem(localStorageStartupName))\n}\n\nconst notes = getNotesFromLocalStorage()\nconsole.log(notes)\n\nclass App extends Component {\n  constructor() {\n    super()\n    // Initialize state hence EditNote with first note in notes array\n    const idOfLastClicked = JSON.parse(localStorage.getItem('lastClicked')) || 0;\n    const note = notes[idOfLastClicked]\n\n    this.state = {\n      notes: notes,\n      id: idOfLastClicked,\n      title: note.title,\n      body: note.body,\n      width: 0\n    };\n  }\n\n  componentDidMount = () => {\n    this._updateStateWithWindowWidth();\n    window.addEventListener('resize', this._updateStateWithWindowWidth)\n  }\n\n  _updateStateWithWindowWidth = () => {\n    this.setState({ width: window.innerWidth })\n  }\n\n  handleChange = (value, key) => {\n    // Key is the property that's changed\n    this._saveNoteToStateAndLocalStorage(value, key)\n  }\n\n  /** Change the state of form input values to currently clicked note */\n  handleEditClickedNote = (e, id) => {\n    // Call function only if a note is to be edited, not deleted\n    // This fixes multiple function calls using event delegation\n    if (!e.target.matches('.delete')); // Do nothing, continue with code execution\n    else return;\n\n    // Find clicked note for editing\n    const note = this.state.notes[id];\n    const title = note.title;\n    const body = note.body;\n\n    // Set found note to be edited\n    this.setState({ id, title, body });\n\n    // Store id of note currently being edited\n    localStorage.setItem('lastClicked', id)\n  }\n\n  handleDeleteNote = (e, id) => {\n    if (!e.target.matches('.delete')) return;\n\n    // Prevent deletion of note being edited\n    if (id === this.state.id) {\n      alert('Sorry, you can\\'t delete the note you\\'re currently editing. '\n        + 'Kindly switch to another note, then delete the intended note.');\n      return;\n    }\n\n    // Get notes\n    const notes = this.state.notes;\n\n    // Find and delete note by id\n    notes.splice(id, 1)\n\n    // If deleting a note above the one currently being edited...\n    // ...re-adjust position of note being edited after the delete\n    if (id < this.state.id) {\n      const id = this.state.id - 1;\n      const { title, body } = notes[id];\n      this.setState({ id, title, body })\n      localStorage.setItem('lastClicked', id)\n    }\n\n    // Update notes in state\n    this.setState({ notes });\n\n    // Save notes to localStorage as well\n    this._saveNotesToLocalStorage();\n  }\n\n  handleAddNewNote = e => {\n    // Initial note content for newly added notes\n    const notes = this.state.notes;\n    const newNote = {\n      title: 'Enter A Title',\n      body: 'Enter New Body'\n    };\n\n    // Save note to state and localStorage\n    notes.push(newNote);\n    this.setState({ notes });\n    this._saveNotesToLocalStorage()\n  }\n\n  _saveNoteToStateAndLocalStorage = (newValue, key) => {\n    // Find note being edited by id\n    const notes = this.state.notes;\n    const note = notes[this.state.id];\n\n    // Update note with value\n    // More dynamic way to set title or body depending on which is changed\n    note[key] = newValue;\n\n    // Update state with new value of note being edited as well\n    this.setState({ title: note.title, body: note.body })\n\n    // Update notes in state\n    notes[this.state.id] = note;\n    this.setState({ notes });\n\n    // Save notes to localStorage as well\n    this._saveNotesToLocalStorage();\n  }\n\n  _saveNotesToLocalStorage = () => {\n    localStorage.setItem(appName, JSON.stringify(this.state.notes));\n  }\n\n  render() {\n    const notes = [];\n\n    this.state.notes.map((note, id) =>\n      notes[id] =\n      <Note key={id + 1}\n        id={id}\n        title={note.title}\n        body={note.body}\n        edit={this.handleEditClickedNote}\n        delete={this.handleDeleteNote}\n        width={this.state.width}\n      />\n    )\n\n    return (\n      <div className={styles.App + ' container-fluid'}>\n        <div className=\"row\">\n          <Header text=\"Simple Note App\" />\n        </div>\n\n        <div className={styles.Main + ' row'}>\n          <div className={styles.List + ' col-md-4 col-sm-5 col-12'}>\n            <div className={styles.Scroll}>{notes}</div>\n            <input\n              type=\"button\"\n              className={styles.AddButton + ' btn btn-light'}\n              style={{ marginTop: '20px' }}\n              value=\"Add New Note\"\n              onClick={this.handleAddNewNote} />\n            <p className={styles.Notice}>\n              Note:  Notes are saved as you type :)\n            </p>\n          </div>\n\n          <div className=\"col-md-8 col-sm-7 col-12\">\n            <EditNote\n              id={this.state.id}\n              title={this.state.title}\n              body={this.state.body}\n              handleChange={this.handleChange}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"EditNote_Form__1cILs\",\"Title\":\"EditNote_Title__1zQlM\",\"Body\":\"EditNote_Body__2YwC5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2fKgf\",\"headerText\":\"Header_headerText__1D0CB\"};"],"sourceRoot":""}